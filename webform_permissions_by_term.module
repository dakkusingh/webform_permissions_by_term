<?php

/**
 * @file
 * Contains webform_location_provider_element.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function webform_permissions_by_term_form_webform_settings_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  /* @var \Drupal\webform\WebformEntitySettingsForm $webform_settings_form
   * @var \Drupal\webform\WebformInterface $webform $webform */
  // Get the settings from the webform config entity.
  $webform_settings_form = $form_state->getFormObject();
  $webform = $webform_settings_form->getEntity();
  $webform_permissions_by_term_settings = $webform->getSetting('webform_permissions_by_term');

  // Get the default settings.
  $settings = webform_permissions_by_term_get_default_settings();
  // Loop through any settings set already and populate them.
  if (!empty($webform_permissions_by_term_settings)) {
    foreach ($webform_permissions_by_term_settings as $setting_name => $value) {
      $settings[$setting_name] = $value;
    }
  }

  // Add the twisty for wpbt.
  $form['webform_permissions_by_term'] = [
    '#type' => 'details',
    '#title' => 'Webform Permissions by Term',
    '#tree' => TRUE,
    '#weight' => -100,
  ];

  // Add the checkbox to enable/disable the security on this webform.
  $form['webform_permissions_by_term']['enable_webform_permissions_by_term'] = [
    '#type' => 'checkbox',
    '#title' => 'Enable Webform permissions by term',
    '#description' => 'If checked, this form will be secured by Taxonomy vocabulary.',
    '#return_value' => TRUE,
    '#default_value' => $settings['enable_webform_permissions_by_term'],
  ];
}

/**
 * Get default settings for webform permissions by term.
 */
function webform_permissions_by_term_get_default_settings() {
  return [
    'enable_webform_permissions_by_term' => 0,
  ];
}

/**
 * Implements hook_webform_submission_form_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function webform_permissions_by_term_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if(!is_webform_secured_by_term($form_state)) return;

  if(!does_webform_have_vocab_element($form_state)) {



    // We want to add the element
    // @todo
    //$elements = $form_state->getFormObject()->getEntity()->getWebform()->getElementsDecoded();
    //$form_state->getFormObject()->getEntity()->getWebform()->setElements($elements);

    $form[get_webform_secured_by_term_webform_machine_name()] = [
      '#type' => 'webform_term_select',
      '#title' => get_webform_secured_by_term_webform_machine_name(),
      '#vocabulary' => get_webform_secured_by_term_vocab_machine_name(),
//      '#access' => FALSE,
    ];

  } else {
//    $request = \Drupal::request();
//
//    if($request->getMethod() == 'POST'){
//      $cqclocationid = $request->get('cqclocationid');
//
//
//    }


  }

}

function is_webform_secured_by_term(FormStateInterface $form_state){
  /* @var \Drupal\webform\WebformEntityForm $webform_settings_form
   * @var \Drupal\webform\Entity\Webform $webform $webform */
  // Get the settings from the webform config entity.

  $webform_settings_form = $form_state->getFormObject();
  $webform = $webform_settings_form->getEntity()->getWebform();

  $webform_permissions_by_term_settings = $webform->getSetting('webform_permissions_by_term');
  if(!empty($webform_permissions_by_term_settings)){
    if($webform_permissions_by_term_settings['enable_webform_permissions_by_term']) {
      return TRUE;
    }
  }
  return FALSE;
}

function does_webform_have_vocab_element(FormStateInterface $form_state){
  $element = $form_state->getFormObject()->getEntity()->getWebform()->getElementDecoded(get_webform_secured_by_term_webform_machine_name());

  if(!empty($element)){
    return TRUE;
  }
  return FALSE;
}

function get_webform_secured_by_term_vocab_machine_name(){
  return \Drupal::config('webform_permissions_by_term.settings.webform_permissions_by_term_vocab')->get('value');
}

function get_webform_secured_by_term_webform_machine_name(){
  return 'webform_permissions_by_term_' . get_webform_secured_by_term_vocab_machine_name();
}


function webform_permissions_by_term_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // TODO Check and implement for our view only.
  // make sure we're altering the correct view
  //if ($view->storage->get('id') === 'MY_VIEW' && $view->current_display === 'MY_VIEW_DISPLAY') {

  // Traverse through the 'where' part of the query.
  // foreach top level condition group
  foreach ($query->where as &$condition_group) {
    // call helper function to recursively alter conditions
    _recursively_alter_query_conditions($condition_group['conditions']);
  }
  //}
}

// helper function: (takes in conditions group argument)
function _recursively_alter_query_conditions(&$conditions) {
  // foreach condition in condition group
  foreach ($conditions as &$condition) {
    // if condition is itself a condition group
    if (isset($condition['field']) && is_a($condition['field'], 'Drupal\Core\Database\Query\Condition')) {
      // call the helper function on it
      _recursively_alter_query_conditions($condition['field']->conditions());
    }
    else {
      // check if we want to alter the condition and if so alter it
      _alter_query_condition($condition);
    }
  }
}

// separate helper function to determine if the condition is one we want to alter
function _alter_query_condition(&$condition) {
  if ($condition['field'] == 'webform_submission_field_pir_hierarchy.value') {
    $condition['value'] = [0, 5, 3];
    $condition['operator'] = 'IN';
  }
}
